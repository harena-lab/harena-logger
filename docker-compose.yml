version: "3.3"
services:

  proxy:
    image: traefik:v2.2
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      # Listen on port 80, default for HTTP, necessary to redirect to HTTPS
      - target: 80
        published: 80
        mode: host
      # Listen on port 443, default for HTTPS
      - target: 443
        published: 443
        mode: host
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      # from the env var TRAEFIK_TAG
      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG?Variable not set}`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG?Variable not set}
        # traefik-http set up only to use the middleware to redirect to https
        - traefik.http.middlewares.${STACK_NAME?Variable not set}-https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.${STACK_NAME?Variable not set}-https-redirect.redirectscheme.permanent=true
        # Handle host with and without "www" to redirect to only one of them
        # Uses environment variable DOMAIN
        # To disable www redirection remove the Host() you want to discard, here and
        # below for HTTPS
        - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
        - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.entrypoints=http
        # traefik-https the actual router using HTTPS
        - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
        - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.entrypoints=https
        - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.tls=true
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.tls.certresolver=le
        # Define the port inside of the Docker service to use
        - traefik.http.services.${STACK_NAME?Variable not set}-proxy.loadbalancer.server.port=80
        # Handle domain with and without "www" to redirect to only one
        # To disable www redirection remove the next line
        - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.regex=^https?://(www.)?(${DOMAIN?Variable not set})/(.*)
        # Redirect a domain with www to non-www
        # To disable it remove the next line
        - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.replacement=https://${DOMAIN?Variable not set}/$${3}
        # Redirect a domain without www to www
        # To enable it remove the previous line and uncomment the next
        # - traefik.http.middlewares.${STACK_NAME}-www-redirect.redirectregex.replacement=https://www.${DOMAIN}/$${3}
        # Middleware to redirect www, to disable it remove the next line 
        - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.middlewares=${STACK_NAME?Variable not set}-www-redirect
        # Middleware to redirect www, and redirect HTTP to HTTPS
        # to disable www redirection remove the section: ${STACK_NAME?Variable not set}-www-redirect,
        - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.middlewares=${STACK_NAME?Variable not set}-www-redirect,${STACK_NAME?Variable not set}-https-redirect

  mongo:
    image: bitnami/mongodb
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    env_file:
      - .env
    volumes:
    - mongo-db-data:/bitnami/mongodb
    - ./backend/app/app/db/mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh
    deploy:
      placement:
        constraints:
          - node.labels.${STACK_NAME?Variable not set}.mongo-db-data == true

  mongo-express:
    image: mongo-express
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    env_file:
      - .env
    depends_on:
      - mongo
    deploy:
      labels:
#        - traefik.enable=true
#        - traefik.constraint-label=${TRAEFIK_TAG?Variable not set}
#        - traefik.http.routers.${STACK_NAME?Variable not set}-mongoexpress-http.entrypoints=http
#        - traefik.http.routers.${STACK_NAME?Variable not set}-mongoexpress-http.middlewares=${STACK_NAME?Variable not set}-https-redirect
#        - traefik.http.routers.${STACK_NAME?Variable not set}-mongoexpress-https.rule=Host(`mongoexpress.${DOMAIN?Variable not set}`)
#        - traefik.http.routers.${STACK_NAME?Variable not set}-mongoexpress-https.entrypoints=https
#        - traefik.http.routers.${STACK_NAME?Variable not set}-mongoexpress-https.tls=true
#        - traefik.http.routers.${STACK_NAME?Variable not set}-mongoexpress-https.tls.certresolver=le
#        - traefik.http.services.${STACK_NAME?Variable not set}-mongoexpress.loadbalancer.server.port=8081
        - traefik.frontend.rule=Host:mongoexpress.${DOMAIN?Variable not set}
        - traefik.enable=true
        - traefik.port=8081
        - traefik.frontend.entryPoints=http,https
        - traefik.frontend.redirect.entryPoint=https
        - traefik.frontend.auth.basic.users=${TRAEFIK_USERS?Variable not set}

  zookeeper:
    image: bitnami/zookeeper
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  brokerkafka:
    image: bitnami/kafka
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper

  kafdrop:
    image: obsidiandynamics/kafdrop
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    depends_on:
      - brokerkafka
    env_file:
      - .env
    deploy:
      labels:
#        - traefik.enable=true
#        - traefik.constraint-label=${TRAEFIK_TAG?Variable not set}
#        - traefik.http.routers.${STACK_NAME?Variable not set}-kafdrop-http.entrypoints=http
#        - traefik.http.routers.${STACK_NAME?Variable not set}-kafdrop-https.rule=Host(`kafdrop.${DOMAIN?Variable not set}`)
#        - traefik.http.routers.${STACK_NAME?Variable not set}-kafdrop-https.entrypoints=https
#        - traefik.http.routers.${STACK_NAME?Variable not set}-kafdrop-https.tls=true
#        - traefik.http.routers.${STACK_NAME?Variable not set}-kafdrop-https.tls.certresolver=le
#        - traefik.http.services.${STACK_NAME?Variable not set}-kafdrop.loadbalancer.server.port=9000
#        - traefik.http.middlewares.{STACK_NAME?Variable not set}-kafdrop.basicauth.removeheader=true
#        - traefik.http.middlewares.{STACK_NAME?Variable not set}-kafdrop.basicauth.users={TRAEFIK_USERS?Variable not set}
#        - traefik.http.middlewares.{STACK_NAME?Variable not set}-kafdrop-https-chain.chain.middlewares=${STACK_NAME?Variable not set}-https-redirect,{STACK_NAME?Variable not set}-kafdrop
#        - traefik.http.routers.${STACK_NAME?Variable not set}-kafdrop-https.middlewares={STACK_NAME?Variable not set}-kafdrop-https-chain
      - traefik.constraint-label=${TRAEFIK_TAG?Variable not set}
      - traefik.frontend.rule=Host:kafdrop.${DOMAIN?Variable not set}
      - traefik.enable=true
      - traefik.port=9000
      - traefik.frontend.entryPoints=http,https
      - traefik.frontend.redirect.entryPoint=https
      - traefik.frontend.auth.basic.users=${TRAEFIK_USERS?Variable not set}

  db:
    image: postgres:12
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    deploy:
      placement:
        constraints:
          - node.labels.${STACK_NAME?Variable not set}.app-db-data == true
  
  backend:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    depends_on:
      - db
      - brokerkafka
      - mongo
    env_file:
      - .env
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SERVER_HOST=https://${DOMAIN?Variable not set}
      # Allow explicit env var override for tests
      - SMTP_HOST=${SMTP_HOST}
    build:
      context: ./backend
      dockerfile: backend.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    deploy:
      labels:
        - traefik.enable=true
        - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
        - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
        - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=80
  
  actionworker:
    image: '${DOCKER_IMAGE_ACTIONWORKER?Variable not set}:${TAG-latest}'
    depends_on:
      - db
      - brokerkafka
      - mongo
    env_file:
      - .env
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SERVER_HOST=https://${DOMAIN?Variable not set}
      # Allow explicit env var override for tests
      - SMTP_HOST=${SMTP_HOST?Variable not set}
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    build:
      context: ./backend
      dockerfile: systemworker.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}

  systemworker:
    image: '${DOCKER_IMAGE_SYSTEMWORKER?Variable not set}:${TAG-latest}'
    depends_on:
      - db
      - brokerkafka
      - mongo
    env_file:
      - .env
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SERVER_HOST=https://${DOMAIN?Variable not set}
      # Allow explicit env var override for tests
      - SMTP_HOST=${SMTP_HOST?Variable not set}
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    build:
      context: ./backend
      dockerfile: actionworker.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}


volumes:
  app-db-data:
  mongo-db-data:

networks:
  traefik-public:
    # Allow setting it to false for testing
    external: ${TRAEFIK_PUBLIC_NETWORK_IS_EXTERNAL-true}
