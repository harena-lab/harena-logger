version: "3.3"
services:

  mongo:
    restart: always
    ports:
      - "27017:27017"

  mongo-express:
    restart: always
    ports:
      - "8081:8081"
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-mongo-express.rule=Host(`mongo-express.${DOMAIN?Variable not set}`)
      - traefik.http.services.${STACK_NAME?Variable not set}-mongo-express.loadbalancer.server.port=8081
      - traefik.http.routers.${STACK_NAME?Variable not set}-mongo-express.middlewares=${STACK_NAME?Variable not set}-mongo-express-basicauth
      - traefik.http.middlewares.${STACK_NAME?Variable not set}-mongo-express-basicauth.basicauth.removeheader=true
      - traefik.http.middlewares.${STACK_NAME?Variable not set}-mongo-express-basicauth.basicauth.users=${TRAEFIK_USERS?Variable not set}

  zookeeper:
    ports:
      - "2181:2181"

  kafdrop:
    restart: always
    ports:
      - "9000:9000"
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-kafdrop.rule=Host(`kafdrop.${DOMAIN?Variable not set}`)
      - traefik.http.services.${STACK_NAME?Variable not set}-kafdrop.loadbalancer.server.port=9000
      - traefik.http.routers.${STACK_NAME?Variable not set}-kafdrop.middlewares=${STACK_NAME?Variable not set}-kafdrop-basicauth
      - traefik.http.middlewares.${STACK_NAME?Variable not set}-kafdrop-basicauth.basicauth.removeheader=true
      - traefik.http.middlewares.${STACK_NAME?Variable not set}-kafdrop-basicauth.basicauth.users=${TRAEFIK_USERS?Variable not set}

  brokerkafka:
    restart: always
    ports:
      - "9092:9092"
      - "29092:29092"


  proxy:
    ports:
      - "80:80"
      - "8090:8080"
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      # from the env var TRAEFIK_TAG
      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG?Variable not set}`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Disable Docker Swarm mode for local development
      # - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true
    labels:
      - traefik.enable=true

  backend:
    ports:
      - "8888:8888"
    volumes:
      - ./backend/app:/app
    environment:
      - JUPYTER=jupyter lab --ip=0.0.0.0 --allow-root --NotebookApp.custom_display_url=http://127.0.0.1:8888
      - SERVER_HOST=http://${DOMAIN?Variable not set}
    build:
      context: ./backend
      dockerfile: backend.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
        INSTALL_JUPYTER: ${INSTALL_JUPYTER-true}
    # command: bash -c "while true; do sleep 1; done"  # Infinite loop to keep container live doing nothing
    command: /start-reload.sh
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
      - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=80


  actionworker:
    volumes:
      - ./backend/app:/app
    environment:
      - RUN=faust -A app.consumers.system_worker worker -l info
      - JUPYTER=jupyter lab --ip=0.0.0.0 --allow-root --NotebookApp.custom_display_url=http://127.0.0.1:8888
      - SERVER_HOST=http://${DOMAIN?Variable not set}
    build:
      context: ./backend
      dockerfile: actionworker.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
        INSTALL_JUPYTER: ${INSTALL_JUPYTER-true}

  systemworker:
    volumes:
      - ./backend/app:/app
    environment:
      - RUN=faust -A app.consumers.action_worker worker -l info
      - JUPYTER=jupyter lab --ip=0.0.0.0 --allow-root --NotebookApp.custom_display_url=http://127.0.0.1:8888
      - SERVER_HOST=http://${DOMAIN?Variable not set}
    build:
      context: ./backend
      dockerfile: systemworker.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
        INSTALL_JUPYTER: ${INSTALL_JUPYTER-true}

networks:
  traefik-public:
    # For local dev, don't expect an external Traefik network
    external: false
